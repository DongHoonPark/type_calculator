{"version":3,"sources":["Misc.ts","pages/QFixed.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["is_signed_fixed","type","RegExp","test","toLowerCase","is_fixed","is_unsigned_fixed","get_type_bitlens","bits","split","map","x","parseInt","hex2val","hex","bitlens","val","integer","ret","i","reduce","a","c","push","reverse","hex2bits","Float32Array","Uint8Array","from","Buffer","buffer","Float64Array","val2hex","resolution","Math","round","bitlen","hexlen","ceil","places","toString","padStart","isNumber","input","QFixed","integerRef","useRef","fractionRef","hexRef","valueRef","useState","setType","signed","setSigned","setInteger","fraction","setFraction","setHex","value","setValue","onTypeNumberInputChanged","e","target","name","charAt","length","slice","current","useEffect","concat","onEnterPressed","key","parseFloat","Container","Form","Label","Row","Group","as","Col","controlId","Control","defaultValue","onChange","placeholder","ref","onKeyPress","Button","App","link_style","textDecoration","color","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","to","style","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01ce1ade.chunk.js","sourcesContent":["const is_unsigned_fixed = (type:string)=>RegExp(\"^uq[0-9]+\\\\.[0-9]+$\").test(type.toLowerCase())\r\nconst is_signed_fixed   = (type:string)=>RegExp(\"^q[0-9]+\\\\.[0-9]+$\").test(type.toLowerCase())\r\nconst is_fixed          = (type:string)=>is_signed_fixed(type)||is_unsigned_fixed(type)\r\n\r\nexport function get_type_bitlens(type : string){\r\n    type = type.toLowerCase()\r\n    let extract_bit = (fixed_type:string)=>{\r\n        return fixed_type.split(\"q\")[1].split(\".\").map((x)=>(parseInt(x)))\r\n    }\r\n                \r\n    if(is_fixed(type)){\r\n        let bits = extract_bit(type)\r\n        return [is_signed_fixed(type)? 1 : 0, ...bits]\r\n    }\r\n    else if(type === 'float32'){\r\n        return [1, 8, 23]\r\n    }\r\n    else if(type === 'float64'){\r\n        return [1, 11, 52]\r\n    }\r\n    else{\r\n        //no match type\r\n        return [0,0,0]\r\n    }        \r\n}\r\n            \r\nexport function hex2bits(hex : string, type : string){\r\n    let integer = parseInt(hex, 16)\r\n    let ret = []\r\n    for(let i = 0; i < get_type_bitlens(type).reduce((a,c)=>a+c); i++){\r\n        ret.push(integer&(1<<i) ? 1 : 0)\r\n    }\r\n    return ret.reverse()\r\n}\r\n\r\nexport function bits2hex(bits : number[]){\r\n    const integer2hex = (num : number, places : number) => num.toString(16).padStart(places, '0')\r\n    let integer = 0;\r\n    for(let i = 0; i < bits.length; i++){\r\n        if(bits.reverse()[i] == 1){\r\n            integer += (1<<i)\r\n        }\r\n    }\r\n    let hexlen = Math.ceil(bits.length / 4) \r\n\r\n    return integer2hex(integer, hexlen)\r\n}\r\n\r\nexport function hex2val(hex : string, type:string){\r\n    if(is_fixed(type)){\r\n        let bitlens = get_type_bitlens(type)\r\n        let integer = parseInt(hex, 16)\r\n        let unit = 1<<bitlens[2]\r\n        \r\n        let val = integer / unit\r\n\r\n        if(is_signed_fixed(type) && hex2bits(hex, type)[0] === 1){\r\n            val -= 1<< (1 + bitlens[1])\r\n        }\r\n        return val\r\n    }\r\n    else if(type === 'float32'){\r\n        return new Float32Array(Uint8Array.from(Buffer.from(hex, 'hex').reverse()).buffer)[0]\r\n    }\r\n    else if(type === 'float64'){\r\n        return new Float64Array(Uint8Array.from(Buffer.from(hex, 'hex').reverse()).buffer)[0]\r\n    }\r\n    else{\r\n        return 0\r\n    }      \r\n}\r\n\r\nexport function val2hex(val : number, type:string){\r\n    if(is_fixed(type)){\r\n        const integer2hex = (num : number, places : number) => num.toString(16).padStart(places, '0')\r\n\r\n        let bitlens = get_type_bitlens(type)\r\n        let resolution = 1 / (1<<bitlens[2])\r\n\r\n        let integer = Math.round( val / resolution )\r\n        let bitlen = bitlens.reduce((a,c)=>a+c)\r\n        \r\n        if(integer < 0){\r\n            integer += 1 << bitlen + 1\r\n        }\r\n\r\n        let hexlen = Math.ceil(bitlen / 4) \r\n        return integer2hex(integer, hexlen)\r\n    }\r\n    else if(type === 'float32'){\r\n        return \"0\"\r\n    }\r\n    else if(type === 'float64'){\r\n        return \"0\"\r\n    }\r\n    else{\r\n        return \"0\"\r\n    }    \r\n}\r\n\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            ","import React, { CSSProperties, useEffect, useState, useRef } from 'react';\r\nimport { Container, Form, Col, Button } from 'react-bootstrap';\r\nimport BitsPanel from '../components/BitsPanel';\r\nimport { get_type_bitlens, hex2val, val2hex } from '../Misc';\r\n\r\nconst isNumber = (input : string) =>{ return '0' <= input && input <= '9'}\r\n\r\n\r\nfunction QFixed(){\r\n    const integerRef = useRef<any>()\r\n    const fractionRef = useRef<any>()\r\n    const hexRef = useRef<any>()\r\n    const valueRef = useRef<any>()\r\n\r\n    const [type, setType] = useState<string>(\"q0.0\")\r\n    const [signed, setSigned] = useState<string>(\"q\")\r\n    const [integer, setInteger] = useState<string>(\"0\")\r\n    const [fraction, setFraction] = useState<string>(\"0\")\r\n\r\n    const [hex, setHex] = useState<string>(\"0\")\r\n    const [value, setValue] = useState<string>(\"0\")\r\n\r\n    const [convDirection, setConvDirection] = useState<string>(\"binary_to_value\")\r\n\r\n    const onTypeSignedInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value, name } = e.target\r\n        if(value === \"Signed\")\r\n            setSigned(\"q\")\r\n        else\r\n            setSigned(\"uq\")\r\n\r\n    }\r\n    const onTypeNumberInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value, name } = e.target\r\n        let input = value.charAt(value.length - 1)\r\n        if(!isNumber(input)){\r\n            e.target.value = value.slice(0, -1)\r\n        }\r\n        switch(e.target){\r\n            case integerRef.current:\r\n                setInteger(e.target.value)\r\n                break\r\n            case fractionRef.current:\r\n                setFraction(e.target.value)\r\n                break\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setType(\"\".concat(signed?signed:\"\" , integer?integer:\"\", \".\", fraction?fraction:\"\"))\r\n    }, [signed, integer, fraction])\r\n\r\n    useEffect(()=>{\r\n        valueRef.current.value = value\r\n    },[value])\r\n\r\n    useEffect(()=>{\r\n        hexRef.current.value = hex\r\n    },[hex])\r\n\r\n    const onHexInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value, name } = e.target\r\n        let input = value.charAt(value.length - 1).toLowerCase()\r\n        if(isNumber(input) || ('a' <= input && input <= 'f')){\r\n            setHex(e.target.value)\r\n        }\r\n        else{\r\n            e.target.value = value.slice(0, -1)\r\n        }\r\n    }\r\n\r\n    const onEnterPressed : React.KeyboardEventHandler<HTMLInputElement>=(e)=>{\r\n        if (e.key === 'Enter') {\r\n            switch(e.target){\r\n                case valueRef.current:\r\n                    setHex((val2hex(parseFloat(value), type).toString()))\r\n                    setValue((hex2val(hex, type).toString()))\r\n                    break\r\n                case hexRef.current:\r\n                    setValue((hex2val(hex, type).toString()))\r\n                    break\r\n            }\r\n        }\r\n    }\r\n\r\n    const onValueInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Container>\r\n            <Form>\r\n            <Form.Label>Q-Fixed Type : {type} / {get_type_bitlens(type?type:\"q0.0\").reduce((a,c)=>a+c)}bit</Form.Label>\r\n            <Form.Row>\r\n                <Form.Group as={Col} controlId=\"signed\">\r\n                    <Form.Control as=\"select\" defaultValue=\"Signed\" onChange={onTypeSignedInputChanged}>\r\n                        <option>Signed</option>\r\n                        <option>Unsigned</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"integer\" >\r\n                <Form.Control type=\"text\" placeholder=\"Integer\" defaultValue={0} onChange={onTypeNumberInputChanged} ref={integerRef}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"fraction\">\r\n                <Form.Control type=\"text\" placeholder=\"Fraction\" defaultValue={0} onChange={onTypeNumberInputChanged} ref={fractionRef}/>\r\n                </Form.Group>\r\n            </Form.Row>\r\n            </Form>\r\n            <Form.Group>\r\n                <Form.Label>Hex Representation</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"hex\" onKeyPress={onEnterPressed} onChange={onHexInputChanged} ref={hexRef}/>\r\n                <br/>\r\n                <Form.Label>Value</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"value in decimal\" onKeyPress={onEnterPressed} onChange={onValueInputChanged} ref={valueRef}/>\r\n            </Form.Group>\r\n            <br/>\r\n            <Button>Calculate</Button>\r\n            {/* <BitsPanel>\r\n            </BitsPanel> */}\r\n        </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QFixed","import React, { CSSProperties } from 'react';\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// import './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\"\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport {AiFillCalculator} from 'react-icons/ai'\r\nimport {FaCalculator} from 'react-icons/fa'\r\nimport QFixed from './pages/QFixed';\r\n\r\nfunction App() {\r\n  let link_style : CSSProperties = {\r\n    textDecoration : 'inherit',\r\n    color : 'inherit'\r\n  }\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Navbar.Brand> <FaCalculator/> Type Calculator </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav>\r\n              <Nav.Link><Link to=\"/float32\" style={link_style}>Float32</Link></Nav.Link>\r\n              <Nav.Link><Link to=\"/float64\" style={link_style}>Float64</Link></Nav.Link>\r\n              <Nav.Link><Link to=\"/qfixed\"  style={link_style}>Q-Fixed</Link></Nav.Link>\r\n              <Nav.Link><Link to=\"/fixed_arithmetic\" style={link_style}>Fixed Arithmetic</Link></Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <Switch>\r\n          <Route path=\"/float32\"></Route>\r\n          <Route path=\"/float64\"></Route>\r\n          <Route path=\"/qfixed\"><QFixed></QFixed></Route>\r\n          <Route path=\"/fixed_arithmetic\"></Route>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}