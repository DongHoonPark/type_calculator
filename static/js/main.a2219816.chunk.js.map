{"version":3,"sources":["Conversions.ts","components/CalcPanel.tsx","pages/Fixed.tsx","pages/Floating.tsx","pages/About.tsx","App.tsx","reportWebVitals.ts","index.tsx","Misc.ts","pages/About.md"],"names":["is_signed_fixed","type","RegExp","test","toLowerCase","is_fixed","is_unsigned_fixed","isNumber","input","get_type_bitlens","bits","split","map","x","parseInt","hex2bits","hex","ret","i","length","integer","j","push","reduce","a","c","reverse","bits2hex","places","bits_rcopy","slice","qbits_chunk","chunker","qbits","concat","toString","padStart","hex2val","bitlens","val","Buffer","from","readFloatBE","readDoubleBE","val2hex","resolution","Math","round","bitlen","hexlen","ceil","buf","alloc","writeFloatBE","toJSON","data","join","writeDoubleBE","CalcPanel","hexRef","useRef","valueRef","useState","setHex","value","setValue","convDirection","setConvDirection","width","useWindowWidth","bvCol","useEffect","current","fromValue","hexUpdate","parseFloat","toValue","onEnterPressed","e","key","target","offset","unshift","Form","Group","Label","Control","placeholder","onKeyPress","onChange","charAt","ref","Row","Col","xs","sm","md","lg","style","marginTop","alignContent","className","ToggleButtonGroup","name","vv","ii","filter","v","index","bindex","variant","disabled","ToggleButton","onClick","currentTarget","bits_tmp","Button","FixedPage","integerRef","fractionRef","setType","signed","setSigned","setInteger","fraction","setFraction","onTypeNumberInputChanged","Container","as","controlId","defaultValue","FloatingPage","AboutPage","aboutMarkdownPath","require","markdown","setMarkdown","console","log","fetch","file","then","res","text","plugins","gfm","emoji","children","App","link_style","textDecoration","color","basename","process","exact","to","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","path","Floating","Fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","n","Array"],"mappings":"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","file":"static/js/main.a2219816.chunk.js","sourcesContent":["import { chunker } from \"./Misc\"\r\n\r\nconst is_unsigned_fixed = (type:string)=>RegExp(\"^uq[0-9]+\\\\.[0-9]+$\").test(type.toLowerCase())\r\nconst is_signed_fixed   = (type:string)=>RegExp(\"^q[0-9]+\\\\.[0-9]+$\").test(type.toLowerCase())\r\nconst is_fixed          = (type:string)=>is_signed_fixed(type)||is_unsigned_fixed(type)\r\nexport const isNumber = (input : string) =>{ return '0' <= input && input <= '9'}\r\n\r\nexport function get_type_bitlens(type : string){\r\n    type = type.toLowerCase()\r\n    let extract_bit = (fixed_type:string)=>{\r\n        return fixed_type.split(\"q\")[1].split(\".\").map((x)=>(parseInt(x)))\r\n    }\r\n                \r\n    if(is_fixed(type)){\r\n        let bits = extract_bit(type)\r\n        return [is_signed_fixed(type)? 1 : 0, ...bits]\r\n    }\r\n    else if(type === 'float32'){\r\n        return [1, 8, 23]\r\n    }\r\n    else if(type === 'float64'){\r\n        return [1, 11, 52]\r\n    }\r\n    else{\r\n        //no match type\r\n        return [0,0,0]\r\n    }        \r\n}\r\n            \r\nexport function hex2bits(hex : string, type : string){\r\n    let ret = []\r\n    for(let i = hex.length - 1; i >= 0; i--){\r\n        let integer = parseInt(hex[i], 16)\r\n        for(let j = 0; j < 4; j++){\r\n            ret.push(integer & (1<<j) ? 1 : 0)\r\n            if(ret.length === get_type_bitlens(type).reduce((a,c)=>a+c)){\r\n                return ret.reverse()\r\n            }\r\n        }\r\n    }\r\n    while(ret.length < get_type_bitlens(type).reduce((a,c)=>a+c)){\r\n        ret.push(0)\r\n    }\r\n    return ret.reverse()\r\n}\r\n\r\nexport function bits2hex(bits : number[]){\r\n    const integer2hex = (num : number, places : number) => num.toString(16).padStart(places, '0')\r\n    let bits_rcopy = bits.slice().reverse()\r\n    let qbits_chunk = chunker(bits_rcopy, 4).reverse()\r\n    let ret = \"\"\r\n    for(let qbits of qbits_chunk){\r\n        let integer = 0\r\n        for(let i = 0; i < qbits.length; i++){\r\n            if(qbits[i] === 1){\r\n                integer += 1<<i\r\n            }\r\n        }\r\n        ret = ret.concat(integer2hex(integer, 1))\r\n    }\r\n    return ret\r\n}\r\n\r\nexport function hex2val(hex : string, type:string){\r\n    if(is_fixed(type)){\r\n        let bitlens = get_type_bitlens(type)\r\n        let integer = parseInt(hex, 16)\r\n        let unit = 1<<bitlens[2]\r\n        \r\n        let val = integer / unit\r\n        if(is_signed_fixed(type) && hex2bits(hex, type)[0] === 1){\r\n            val -= 1<< (1 + bitlens[1])\r\n        }\r\n        return val\r\n    }\r\n    else if(type === 'float32'){\r\n        return Buffer.from(hex, 'hex').readFloatBE(0)\r\n    }\r\n    else if(type === 'float64'){\r\n        return Buffer.from(hex, 'hex').readDoubleBE(0)\r\n    }\r\n    else{\r\n        return 0\r\n    }      \r\n}\r\n\r\nexport function val2hex(val : number, type:string){\r\n    if(is_fixed(type)){\r\n        const integer2hex = (num : number, places : number) => num.toString(16).padStart(places, '0')\r\n\r\n        let bitlens = get_type_bitlens(type)\r\n        let resolution = 1 / (1<<bitlens[2])\r\n\r\n        let integer = Math.round( val / resolution )\r\n        let bitlen = bitlens.reduce((a,c)=>a+c)\r\n        \r\n        if(integer < 0){\r\n            integer += 1 << bitlen\r\n        }\r\n\r\n        let hexlen = Math.ceil(bitlen / 4) \r\n        let hex = integer2hex(integer, hexlen)\r\n\r\n        if(hex.length > hexlen){\r\n            hex = hex.slice(1)\r\n        }\r\n        return hex\r\n    }\r\n    else if(type === 'float32'){\r\n        let buf = Buffer.alloc(4)\r\n        buf.writeFloatBE(val, 0)\r\n        return buf.toJSON().data.map(x=>x.toString(16).padStart(2, '0')).join(\"\")\r\n    }\r\n    else if(type === 'float64'){\r\n        let buf = Buffer.alloc(8)\r\n        buf.writeDoubleBE(val, 0)\r\n        return buf.toJSON().data.map(x=>x.toString(16).padStart(2, '0')).join(\"\")\r\n    }\r\n    else{\r\n        return \"0\"\r\n    }    \r\n}\r\n\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            ","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Form, Col, Row, Button, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\r\nimport { get_type_bitlens, hex2val, val2hex, isNumber, hex2bits, bits2hex } from '../Conversions';\r\nimport {useWindowWidth} from '@react-hook/window-size'\r\nimport { chunker } from '../Misc';\r\n\r\ntype CalcPanelProps = {\r\n    type : string\r\n}\r\n\r\nexport default function CalcPanel({type}:CalcPanelProps){\r\n    \r\n    const hexRef = useRef<any>()\r\n    const valueRef = useRef<any>()\r\n\r\n    const [hex, setHex] = useState<string>(\"0\")\r\n    const [value, setValue] = useState<string>(\"0\")\r\n\r\n    const [convDirection, setConvDirection] = useState<string>(\"binary_to_value\")\r\n\r\n    const width = useWindowWidth()\r\n    const [bvCol] = useState<number>(8)\r\n\r\n    useEffect(()=>{\r\n        valueRef.current.value = value\r\n    },[value])\r\n\r\n    useEffect(()=>{\r\n        hexRef.current.value = hex\r\n    },[hex])\r\n\r\n    useEffect(()=>{\r\n\r\n    },[width])\r\n\r\n    const onHexInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value } = e.target\r\n        let input = value.charAt(value.length - 1).toLowerCase()\r\n        setConvDirection(\"toValue\")\r\n        if(isNumber(input) || ('a' <= input && input <= 'f')){\r\n            setHex(e.target.value)\r\n        }\r\n        else{\r\n            e.target.value = value.slice(0, -1)\r\n        }\r\n    }\r\n\r\n    const fromValue = ()=>{\r\n        let hexUpdate = (val2hex(parseFloat(value), type).toString())\r\n        setHex(hexUpdate)\r\n        setValue((hex2val(hexUpdate, type).toString()))\r\n    }\r\n\r\n    const toValue = ()=>{\r\n        setValue((hex2val(hex, type).toString()))\r\n    }\r\n\r\n    const onEnterPressed : React.KeyboardEventHandler<HTMLInputElement>=(e)=>{\r\n        if (e.key === 'Enter') {\r\n            switch(e.target){\r\n                case valueRef.current:\r\n                    fromValue()\r\n                    break\r\n                case hexRef.current:\r\n                    toValue()\r\n                    break\r\n            }\r\n        }\r\n    }\r\n\r\n    const onValueInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        setConvDirection(\"fromValue\")\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    const onCalculateButtonClicked : React.MouseEventHandler = ()=>{\r\n        switch(convDirection){\r\n            case \"fromValue\":\r\n                fromValue()\r\n                break\r\n            case \"toValue\":\r\n                toValue()\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n\r\n    let bits = chunker(hex2bits(hex, type).reverse(), bvCol).map(x=>x.reverse()).reverse()\r\n    let offset = 0\r\n    while(bits[0].length < bvCol){\r\n        bits[0].unshift(\" \")\r\n        offset++\r\n    }\r\n    return(\r\n        <>\r\n        <Form.Group>\r\n            <Form.Label>Hex Representation</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"hex\" onKeyPress={onEnterPressed} onChange={onHexInputChanged} ref={hexRef}/>\r\n        </Form.Group>\r\n        <Row>\r\n        {\r\n            bits.map((c, i)=>{\r\n                return(\r\n                    <Col xs={12} sm={12} md={6} lg={3} style={{marginTop:\"5px\", alignContent:\"center\"}} className=\"text-center\">\r\n                        <ToggleButtonGroup type=\"checkbox\" name={\"tbg\".concat(i.toString())} \r\n                            value={c.slice().reverse().map((vv,ii)=>vv===1?ii:null).filter(x=>x!=null)}>\r\n\r\n                            {c.map((v, j)=>{\r\n\r\n                                let index = i * bvCol + j - offset\r\n                                let bindex = bits.length * bvCol - (i * bvCol + j) - 1\r\n\r\n                                let variant = 'secondary'\r\n                                let disabled = false\r\n                                let bitlens = get_type_bitlens(type)\r\n\r\n                                if(index < bitlens[0]){\r\n                                    variant = 'warning'\r\n                                }\r\n                                else if(index < bitlens[0] + bitlens[1]){\r\n                                    variant = 'success'\r\n                                }\r\n                                else if(index < bitlens[0] + bitlens[1] + bitlens[2]){\r\n                                    variant = 'primary'\r\n                                }\r\n                                else{\r\n                                    disabled = true\r\n                                }\r\n\r\n                                return(\r\n                                    <ToggleButton value={bindex} variant={variant} disabled={disabled} onClick={(e)=>{\r\n                                        if(e.currentTarget === e.target){\r\n                                            setConvDirection(\"toValue\")\r\n                                            let bits_tmp = hex2bits(hex, type)\r\n                                            if(v === 0){\r\n                                                bits_tmp[index] = 1\r\n                                            }\r\n                                            else{\r\n                                                bits_tmp[index] = 0\r\n                                            }\r\n                                            setHex(bits2hex(bits_tmp))\r\n                                        }\r\n                                    }}>\r\n                                        {v}\r\n                                    </ToggleButton>\r\n                                )\r\n                            })}\r\n                        </ToggleButtonGroup>\r\n                    </Col>\r\n                )\r\n            })\r\n        }\r\n        </Row>\r\n        <br/>\r\n        <Form.Group>\r\n            <Form.Label>Value</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"value in decimal\" onKeyPress={onEnterPressed} onChange={onValueInputChanged} ref={valueRef}/>\r\n        </Form.Group>\r\n        <br/>\r\n        <Button onClick={onCalculateButtonClicked}>Calculate</Button>\r\n        </>\r\n    )\r\n}","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Container, Form, Col } from 'react-bootstrap';\r\nimport CalcPanel from '../components/CalcPanel';\r\nimport { get_type_bitlens, isNumber } from '../Conversions';\r\n\r\nfunction FixedPage(){\r\n    const integerRef = useRef<any>()\r\n    const fractionRef = useRef<any>()\r\n\r\n    const [type, setType]         = useState<string>(\"uq8.8\")\r\n    const [signed, setSigned]     = useState<string>(\"uq\")\r\n    const [integer, setInteger]   = useState<string>(\"8\")\r\n    const [fraction, setFraction] = useState<string>(\"8\")\r\n\r\n    const onTypeSignedInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value } = e.target\r\n        if(value === \"Signed\")\r\n            setSigned(\"q\")\r\n        else\r\n            setSigned(\"uq\")\r\n\r\n    }\r\n    const onTypeNumberInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value } = e.target\r\n        let input = value.charAt(value.length - 1)\r\n        if(!isNumber(input)){\r\n            e.target.value = value.slice(0, -1)\r\n        }\r\n        switch(e.target){\r\n            case integerRef.current:\r\n                setInteger(e.target.value)\r\n                break\r\n            case fractionRef.current:\r\n                setFraction(e.target.value)\r\n                break\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setType(\"\".concat(signed?signed:\"\" , integer?integer:\"\", \".\", fraction?fraction:\"\"))\r\n    }, [signed, integer, fraction])\r\n\r\n\r\n    return(\r\n        <>\r\n        <Container>\r\n            <p></p>\r\n            <Form>\r\n            <Form.Label>Q-Fixed Type : {type} / {get_type_bitlens(type?type:\"q0.0\").reduce((a,c)=>a+c)}bit</Form.Label>\r\n            <Form.Row>\r\n                <Form.Group as={Col} controlId=\"signed\">\r\n                    <Form.Control as=\"select\" defaultValue=\"Unsigned\" onChange={onTypeSignedInputChanged}>\r\n                        <option>Signed</option>\r\n                        <option>Unsigned</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"integer\" >\r\n                    <Form.Control type=\"text\" placeholder=\"Integer\" defaultValue={8} onChange={onTypeNumberInputChanged} ref={integerRef}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"fraction\">\r\n                <Form.Control type=\"text\" placeholder=\"Fraction\" defaultValue={8} onChange={onTypeNumberInputChanged} ref={fractionRef}/>\r\n                </Form.Group>\r\n            </Form.Row>\r\n            </Form>\r\n            <CalcPanel type={type}></CalcPanel>\r\n        </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FixedPage","import React, { useState } from 'react';\r\nimport { Container, Form, Col } from 'react-bootstrap';\r\nimport CalcPanel from '../components/CalcPanel';\r\n\r\nfunction FloatingPage(){\r\n    const [type, setType] = useState<string>(\"float32\")\r\n\r\n    const onTypeChange : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value } = e.target\r\n        switch(value){\r\n            case 'Single 32b':\r\n                setType('float32')\r\n                break\r\n            case 'Double 64b':\r\n                setType('float64')\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Container>\r\n            <p></p>\r\n            <Form>\r\n            <Form.Label>IEEE754 Float Type</Form.Label>\r\n            <Form.Row>\r\n                <Form.Group as={Col} controlId=\"signed\">\r\n                    <Form.Control as=\"select\" defaultValue=\"Single 32b\" onChange={onTypeChange}>\r\n                        <option>Single 32b</option>\r\n                        <option>Double 64b</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Form.Row>\r\n            </Form>\r\n            <CalcPanel type = {type} />\r\n        </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FloatingPage","import { Container } from \"react-bootstrap\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport gfm from 'remark-gfm'\r\nimport emoji from 'remark-emoji'\r\nimport { useEffect, useState } from \"react\";\r\n\r\n//@ts-ignore\r\nimport file from \"./About.md\"\r\n\r\nfunction AboutPage(){\r\n    const aboutMarkdownPath = require(\"./About.md\")\r\n    const [markdown, setMarkdown] = useState(\"\")\r\n\r\n    console.log(aboutMarkdownPath)\r\n\r\n    useEffect(() => {\r\n        fetch(file)\r\n          .then((res) => res.text())\r\n          .then((text) => setMarkdown(text));\r\n      }, []);\r\n\r\n    return(\r\n        <>\r\n        <p></p>\r\n        <Container>\r\n            <ReactMarkdown plugins={[gfm, emoji]} children={markdown}/>\r\n        </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AboutPage","import React, { CSSProperties } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// import './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\"\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport {FaCalculator} from 'react-icons/fa'\r\nimport FixedPage from './pages/Fixed';\r\nimport FloatingPage from './pages/Floating';\r\nimport AboutPage from './pages/About';\r\n\r\nfunction App() {\r\n  let link_style : CSSProperties = {\r\n    textDecoration : 'inherit',\r\n    color : 'inherit'\r\n  }\r\n  return (\r\n    <>\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Redirect exact from=\"/\" to=\"/fixed\" />\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n          <Navbar.Brand> <FaCalculator/> Type Calculator </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav>\r\n              <Nav.Link><Link to=\"/float\" style={link_style}>Floating Point</Link></Nav.Link>\r\n              <Nav.Link><Link to=\"/fixed\"  style={link_style}>Fixed Point</Link></Nav.Link>\r\n              <Nav.Link><Link to=\"/about\"  style={link_style}>About</Link></Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <Switch>\r\n          <Route path=\"/float\"><FloatingPage></FloatingPage></Route>\r\n          <Route path=\"/fixed\"><FixedPage></FixedPage></Route>\r\n          <Route path=\"/about\"><AboutPage></AboutPage></Route>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const chunker = (a:Array<any>,n:number) => [...Array(Math.ceil(a.length/n))].map((v,i) => a.slice(i*n, (i+1)*n))\r\n","export default __webpack_public_path__ + \"static/media/About.92a792de.md\";"],"sourceRoot":""}