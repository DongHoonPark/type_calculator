{"version":3,"sources":["Conversions.ts","components/CalcPanel.tsx","Misc.ts","pages/Fixed.tsx","pages/Floating.tsx","pages/About.tsx","App.tsx","reportWebVitals.ts","index.tsx","pages/About.md"],"names":["is_signed_fixed","type","RegExp","test","toLowerCase","is_fixed","is_unsigned_fixed","isNumber","input","get_type_bitlens","bits","split","map","x","parseInt","hex2bits","hex","integer","ret","i","reduce","a","c","push","reverse","bits2hex","bits_rcopy","slice","length","places","hexlen","Math","ceil","toString","padStart","hex2val","bitlens","val","console","log","Buffer","from","readFloatBE","readDoubleBE","val2hex","resolution","round","bitlen","buf","alloc","writeFloatBE","toJSON","data","join","writeDoubleBE","CalcPanel","hexRef","useRef","valueRef","useState","setHex","value","setValue","convDirection","setConvDirection","width","useWindowWidth","bvCol","useEffect","current","n","fromValue","hexUpdate","parseFloat","toValue","onEnterPressed","e","key","target","Array","v","offset","unshift","Form","Group","Label","Control","placeholder","onKeyPress","onChange","name","charAt","ref","Row","Col","xs","sm","md","lg","style","marginTop","alignContent","className","ToggleButtonGroup","concat","vv","ii","filter","j","index","bindex","variant","disabled","ToggleButton","onClick","currentTarget","bits_tmp","Button","FixedPage","integerRef","fractionRef","setType","signed","setSigned","setInteger","fraction","setFraction","onTypeNumberInputChanged","Container","as","controlId","defaultValue","FloatingPage","AboutPage","aboutMarkdownPath","require","markdown","setMarkdown","fetch","file","then","res","text","plugins","gfm","emoji","children","App","link_style","textDecoration","color","basename","process","exact","to","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","path","Floating","Fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4a74c57.chunk.js","sourcesContent":["const is_unsigned_fixed = (type:string)=>RegExp(\"^uq[0-9]+\\\\.[0-9]+$\").test(type.toLowerCase())\r\nconst is_signed_fixed   = (type:string)=>RegExp(\"^q[0-9]+\\\\.[0-9]+$\").test(type.toLowerCase())\r\nconst is_fixed          = (type:string)=>is_signed_fixed(type)||is_unsigned_fixed(type)\r\nexport const isNumber = (input : string) =>{ return '0' <= input && input <= '9'}\r\n\r\nexport function get_type_bitlens(type : string){\r\n    type = type.toLowerCase()\r\n    let extract_bit = (fixed_type:string)=>{\r\n        return fixed_type.split(\"q\")[1].split(\".\").map((x)=>(parseInt(x)))\r\n    }\r\n                \r\n    if(is_fixed(type)){\r\n        let bits = extract_bit(type)\r\n        return [is_signed_fixed(type)? 1 : 0, ...bits]\r\n    }\r\n    else if(type === 'float32'){\r\n        return [1, 8, 23]\r\n    }\r\n    else if(type === 'float64'){\r\n        return [1, 11, 52]\r\n    }\r\n    else{\r\n        //no match type\r\n        return [0,0,0]\r\n    }        \r\n}\r\n            \r\nexport function hex2bits(hex : string, type : string){\r\n    let integer = parseInt(hex, 16)\r\n    let ret = []\r\n    for(let i = 0; i < get_type_bitlens(type).reduce((a,c)=>a+c); i++){\r\n        ret.push(integer&(1<<i) ? 1 : 0)\r\n    }\r\n    return ret.reverse()\r\n}\r\n\r\nexport function bits2hex(bits : number[]){\r\n    const integer2hex = (num : number, places : number) => num.toString(16).padStart(places, '0')\r\n    let integer = 0;\r\n    let bits_rcopy = bits.slice().reverse()\r\n    for(let i = 0; i < bits_rcopy.length; i++){\r\n        if(bits_rcopy[i] == 1){\r\n            integer += (1<<i)\r\n        }\r\n    }\r\n    let hexlen = Math.ceil(bits.length / 4) \r\n\r\n    return integer2hex(integer, hexlen)\r\n}\r\n\r\nexport function hex2val(hex : string, type:string){\r\n    if(is_fixed(type)){\r\n        let bitlens = get_type_bitlens(type)\r\n        let integer = parseInt(hex, 16)\r\n        let unit = 1<<bitlens[2]\r\n        \r\n        let val = integer / unit\r\n        console.log(val)\r\n        console.log(bitlens)\r\n        if(is_signed_fixed(type) && hex2bits(hex, type)[0] === 1){\r\n            val -= 1<< (2 + bitlens[1])\r\n            console.log(1<< (2 + bitlens[1]))\r\n        }\r\n        return val\r\n    }\r\n    else if(type === 'float32'){\r\n        return Buffer.from(hex, 'hex').readFloatBE(0)\r\n    }\r\n    else if(type === 'float64'){\r\n        return Buffer.from(hex, 'hex').readDoubleBE(0)\r\n    }\r\n    else{\r\n        return 0\r\n    }      \r\n}\r\n\r\nexport function val2hex(val : number, type:string){\r\n    if(is_fixed(type)){\r\n        const integer2hex = (num : number, places : number) => num.toString(16).padStart(places, '0')\r\n\r\n        let bitlens = get_type_bitlens(type)\r\n        let resolution = 1 / (1<<bitlens[2])\r\n\r\n        let integer = Math.round( val / resolution )\r\n        let bitlen = bitlens.reduce((a,c)=>a+c)\r\n        \r\n        if(integer < 0){\r\n            integer += 1 << bitlen + 1\r\n        }\r\n\r\n        let hexlen = Math.ceil(bitlen / 4) \r\n        let hex = integer2hex(integer, hexlen)\r\n\r\n        if(hex.length > hexlen){\r\n            hex = hex.slice(1)\r\n        }\r\n        return hex\r\n    }\r\n    else if(type === 'float32'){\r\n        let buf = Buffer.alloc(4)\r\n        buf.writeFloatBE(val, 0)\r\n        return buf.toJSON().data.map(x=>x.toString(16).padStart(2, '0')).join(\"\")\r\n    }\r\n    else if(type === 'float64'){\r\n        let buf = Buffer.alloc(8)\r\n        buf.writeDoubleBE(val, 0)\r\n        return buf.toJSON().data.map(x=>x.toString(16).padStart(2, '0')).join(\"\")\r\n    }\r\n    else{\r\n        return \"0\"\r\n    }    \r\n}\r\n\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            ","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Container, Form, Col, Row, Button, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\r\nimport { get_type_bitlens, hex2val, val2hex, isNumber, hex2bits, bits2hex } from '../Conversions';\r\nimport {useWindowWidth} from '@react-hook/window-size'\r\nimport { chunker } from '../Misc';\r\n\r\ntype CalcPanelProps = {\r\n    type : string\r\n}\r\n\r\nexport default function CalcPanel({type}:CalcPanelProps){\r\n    \r\n    const hexRef = useRef<any>()\r\n    const valueRef = useRef<any>()\r\n\r\n    const [hex, setHex] = useState<string>(\"0\")\r\n    const [value, setValue] = useState<string>(\"0\")\r\n\r\n    const [convDirection, setConvDirection] = useState<string>(\"binary_to_value\")\r\n\r\n    const width = useWindowWidth()\r\n    const [bvCol, setBvCol] = useState<number>(8)\r\n\r\n    useEffect(()=>{\r\n        valueRef.current.value = value\r\n    },[value])\r\n\r\n    useEffect(()=>{\r\n        hexRef.current.value = hex\r\n    },[hex])\r\n\r\n    useEffect(()=>{\r\n\r\n    },[width])\r\n\r\n    const onHexInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value, name } = e.target\r\n        let input = value.charAt(value.length - 1).toLowerCase()\r\n        setConvDirection(\"toValue\")\r\n        if(isNumber(input) || ('a' <= input && input <= 'f')){\r\n            setHex(e.target.value)\r\n        }\r\n        else{\r\n            e.target.value = value.slice(0, -1)\r\n        }\r\n    }\r\n\r\n    const fromValue = ()=>{\r\n        let hexUpdate = (val2hex(parseFloat(value), type).toString())\r\n        setHex(hexUpdate)\r\n        setValue((hex2val(hexUpdate, type).toString()))\r\n    }\r\n\r\n    const toValue = ()=>{\r\n        setValue((hex2val(hex, type).toString()))\r\n    }\r\n\r\n    const onEnterPressed : React.KeyboardEventHandler<HTMLInputElement>=(e)=>{\r\n        if (e.key === 'Enter') {\r\n            switch(e.target){\r\n                case valueRef.current:\r\n                    fromValue()\r\n                    break\r\n                case hexRef.current:\r\n                    toValue()\r\n                    break\r\n            }\r\n        }\r\n    }\r\n\r\n    const onValueInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        setConvDirection(\"fromValue\")\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    const onCalculateButtonClicked : React.MouseEventHandler = ()=>{\r\n        switch(convDirection){\r\n            case \"fromValue\":\r\n                fromValue()\r\n                break\r\n            case \"toValue\":\r\n                toValue()\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n\r\n    let bits = chunker(hex2bits(hex, type).reverse(), bvCol).map(x=>x.reverse()).reverse()\r\n    let offset = 0\r\n    while(bits[0].length < bvCol){\r\n        bits[0].unshift(\" \")\r\n        offset++\r\n    }\r\n    return(\r\n        <>\r\n        <Form.Group>\r\n            <Form.Label>Hex Representation</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"hex\" onKeyPress={onEnterPressed} onChange={onHexInputChanged} ref={hexRef}/>\r\n        </Form.Group>\r\n        <Row>\r\n        {\r\n            bits.map((c, i)=>{\r\n                return(\r\n                    <Col xs={12} sm={12} md={6} lg={3} style={{marginTop:\"5px\", alignContent:\"center\"}} className=\"text-center\">\r\n                        <ToggleButtonGroup type=\"checkbox\" name={\"tbg\".concat(i.toString())} \r\n                            value={c.slice().reverse().map((vv,ii)=>vv===1?ii:null).filter(x=>x!=null)}>\r\n\r\n                            {c.map((v, j)=>{\r\n\r\n                                let index = i * bvCol + j - offset\r\n                                let bindex = bits.length * bvCol - (i * bvCol + j) - 1\r\n\r\n                                let variant = 'secondary'\r\n                                let disabled = false\r\n                                let bitlens = get_type_bitlens(type)\r\n\r\n                                if(index < bitlens[0]){\r\n                                    variant = 'warning'\r\n                                }\r\n                                else if(index < bitlens[0] + bitlens[1]){\r\n                                    variant = 'success'\r\n                                }\r\n                                else if(index < bitlens[0] + bitlens[1] + bitlens[2]){\r\n                                    variant = 'primary'\r\n                                }\r\n                                else{\r\n                                    disabled = true\r\n                                }\r\n\r\n                                return(\r\n                                    <ToggleButton value={bindex} variant={variant} disabled={disabled} onClick={(e)=>{\r\n                                        if(e.currentTarget == e.target){\r\n                                            setConvDirection(\"toValue\")\r\n                                            if(v === 0){\r\n                                                let bits_tmp = hex2bits(hex, type)\r\n                                                bits_tmp[index] = 1\r\n                                                setHex(bits2hex(bits_tmp))\r\n                                            }\r\n                                            else{\r\n                                                let bits_tmp = hex2bits(hex, type)\r\n                                                bits_tmp[index] = 0\r\n                                                setHex(bits2hex(bits_tmp))\r\n                                            }\r\n                                        }\r\n                                    }}>\r\n                                        {v}\r\n                                    </ToggleButton>\r\n                                )\r\n                            })}\r\n                        </ToggleButtonGroup>\r\n                    </Col>\r\n                )\r\n            })\r\n        }\r\n        </Row>\r\n        <br/>\r\n        <Form.Group>\r\n            <Form.Label>Value</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"value in decimal\" onKeyPress={onEnterPressed} onChange={onValueInputChanged} ref={valueRef}/>\r\n        </Form.Group>\r\n        <br/>\r\n        <Button onClick={onCalculateButtonClicked}>Calculate</Button>\r\n        </>\r\n    )\r\n}","export const chunker = (a:Array<any>,n:number) => [...Array(Math.ceil(a.length/n))].map((v,i) => a.slice(i*n, (i+1)*n))\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Container, Form, Col, Button } from 'react-bootstrap';\r\nimport CalcPanel from '../components/CalcPanel';\r\nimport { get_type_bitlens, hex2val, val2hex, isNumber } from '../Conversions';\r\n\r\nfunction FixedPage(){\r\n    const integerRef = useRef<any>()\r\n    const fractionRef = useRef<any>()\r\n\r\n    const [type, setType]         = useState<string>(\"uq8.8\")\r\n    const [signed, setSigned]     = useState<string>(\"uq\")\r\n    const [integer, setInteger]   = useState<string>(\"8\")\r\n    const [fraction, setFraction] = useState<string>(\"8\")\r\n\r\n    const onTypeSignedInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value, name } = e.target\r\n        if(value === \"Signed\")\r\n            setSigned(\"q\")\r\n        else\r\n            setSigned(\"uq\")\r\n\r\n    }\r\n    const onTypeNumberInputChanged : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value, name } = e.target\r\n        let input = value.charAt(value.length - 1)\r\n        if(!isNumber(input)){\r\n            e.target.value = value.slice(0, -1)\r\n        }\r\n        switch(e.target){\r\n            case integerRef.current:\r\n                setInteger(e.target.value)\r\n                break\r\n            case fractionRef.current:\r\n                setFraction(e.target.value)\r\n                break\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setType(\"\".concat(signed?signed:\"\" , integer?integer:\"\", \".\", fraction?fraction:\"\"))\r\n    }, [signed, integer, fraction])\r\n\r\n\r\n    return(\r\n        <>\r\n        <Container>\r\n            <p></p>\r\n            <Form>\r\n            <Form.Label>Q-Fixed Type : {type} / {get_type_bitlens(type?type:\"q0.0\").reduce((a,c)=>a+c)}bit</Form.Label>\r\n            <Form.Row>\r\n                <Form.Group as={Col} controlId=\"signed\">\r\n                    <Form.Control as=\"select\" defaultValue=\"Unsigned\" onChange={onTypeSignedInputChanged}>\r\n                        <option>Signed</option>\r\n                        <option>Unsigned</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"integer\" >\r\n                    <Form.Control type=\"text\" placeholder=\"Integer\" defaultValue={8} onChange={onTypeNumberInputChanged} ref={integerRef}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"fraction\">\r\n                <Form.Control type=\"text\" placeholder=\"Fraction\" defaultValue={8} onChange={onTypeNumberInputChanged} ref={fractionRef}/>\r\n                </Form.Group>\r\n            </Form.Row>\r\n            </Form>\r\n            <CalcPanel type={type}></CalcPanel>\r\n        </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FixedPage","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Container, Form, Col, Button } from 'react-bootstrap';\r\nimport CalcPanel from '../components/CalcPanel';\r\nimport { get_type_bitlens, hex2val, val2hex, isNumber } from '../Conversions';\r\n\r\nfunction FloatingPage(){\r\n    const [type, setType] = useState<string>(\"float32\")\r\n\r\n    const onTypeChange : React.ChangeEventHandler<HTMLInputElement> = (e) =>{\r\n        const { value, name } = e.target\r\n        switch(value){\r\n            case 'Single 32b':\r\n                setType('float32')\r\n                break\r\n            case 'Double 64b':\r\n                setType('float64')\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Container>\r\n            <p></p>\r\n            <Form>\r\n            <Form.Label>IEEE754 Float Type</Form.Label>\r\n            <Form.Row>\r\n                <Form.Group as={Col} controlId=\"signed\">\r\n                    <Form.Control as=\"select\" defaultValue=\"Single 32b\" onChange={onTypeChange}>\r\n                        <option>Single 32b</option>\r\n                        <option>Double 64b</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Form.Row>\r\n            </Form>\r\n            <CalcPanel type = {type} />\r\n        </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FloatingPage","import { Container, Jumbotron } from \"react-bootstrap\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport gfm from 'remark-gfm'\r\nimport emoji from 'remark-emoji'\r\nimport { useEffect, useState } from \"react\";\r\n\r\n//@ts-ignore\r\nimport file from \"./About.md\"\r\n\r\nfunction AboutPage(){\r\n    const aboutMarkdownPath = require(\"./About.md\")\r\n    const [markdown, setMarkdown] = useState(\"\")\r\n\r\n    console.log(aboutMarkdownPath)\r\n\r\n    useEffect(() => {\r\n        fetch(file)\r\n          .then((res) => res.text())\r\n          .then((text) => setMarkdown(text));\r\n      }, []);\r\n\r\n    return(\r\n        <>\r\n        <p></p>\r\n        <Container>\r\n            <ReactMarkdown plugins={[gfm, emoji]} children={markdown}/>\r\n        </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AboutPage","import React, { CSSProperties } from 'react';\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// import './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\"\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport {AiFillCalculator} from 'react-icons/ai'\r\nimport {FaCalculator} from 'react-icons/fa'\r\nimport FixedPage from './pages/Fixed';\r\nimport FloatingPage from './pages/Floating';\r\nimport AboutPage from './pages/About';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nfunction App() {\r\n  let link_style : CSSProperties = {\r\n    textDecoration : 'inherit',\r\n    color : 'inherit'\r\n  }\r\n  return (\r\n    <>\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Redirect exact from=\"/\" to=\"/fixed\" />\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n          <Navbar.Brand> <FaCalculator/> Type Calculator </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav>\r\n              <Nav.Link><Link to=\"/float\" style={link_style}>Floating Point</Link></Nav.Link>\r\n              <Nav.Link><Link to=\"/fixed\"  style={link_style}>Fixed Point</Link></Nav.Link>\r\n              <Nav.Link><Link to=\"/about\"  style={link_style}>About</Link></Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <Switch>\r\n          <Route path=\"/float\"><FloatingPage></FloatingPage></Route>\r\n          <Route path=\"/fixed\"><FixedPage></FixedPage></Route>\r\n          <Route path=\"/about\"><AboutPage></AboutPage></Route>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export default __webpack_public_path__ + \"static/media/About.92a792de.md\";"],"sourceRoot":""}